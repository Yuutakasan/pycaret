#!/usr/bin/env python3
"""
Step5_CategoryWise_Compare_with_Overfitting.ipynb に店舗別分析セルを追加
"""

import json
from pathlib import Path

# 店舗別分析セルのコード
store_analysis_cells = [
    {
        'cell_type': 'markdown',
        'id': 'store_analysis_header',
        'source': [
            '# 店舗別分析\n',
            '\n',
            '## 目的\n',
            '全店舗統合モデル vs 店舗別個別モデルのパフォーマンス比較\n',
            '\n',
            '**仮説:**\n',
            '- 店舗ごとに顧客属性・立地特性が異なる\n',
            '- 店舗別モデルの方が精度が高い可能性\n',
            '- ただし、データ不足で過学習のリスクも'
        ]
    },
    {
        'cell_type': 'code',
        'id': 'store_all_unified',
        'source': [
            '# ========================================\n',
            '# 8. 全店舗統合モデル（店舗をダミー変数化）\n',
            '# ========================================\n',
            '\n',
            'print(\'\\n\' + \'=\'*80)\n',
            'print(\'🏪 全店舗統合モデル分析（店舗をダミー変数化）\')\n',
            'print(\'=\'*80)\n',
            '\n',
            '# 全データ（全カテゴリ×全店舗）\n',
            'all_store_data = data.copy()\n',
            '\n',
            'print(f\'\\n全店舗データ: {len(all_store_data)}行\')\n',
            'print(f\'店舗数: {all_store_data[\"店舗\"].nunique()}\')\n',
            '\n',
            '# 不要列除外\n',
            'exclude_cols = [\'商品名\', \'日付\', \'売上金額\', \'category_l\',\n',
            '               \'フェイスくくり大分類\', \'フェイスくくり中分類\', \'フェイスくくり小分類\']\n',
            '\n',
            '# 店舗をダミー変数化\n',
            'store_dummies = pd.get_dummies(all_store_data[\'店舗\'], prefix=\'store\')\n',
            '\n',
            '# カテゴリもダミー変数化\n',
            'if \'category_l\' in all_store_data.columns:\n',
            '    category_dummies = pd.get_dummies(all_store_data[\'category_l\'], prefix=\'cat\')\n',
            'else:\n',
            '    category_dummies = pd.DataFrame()\n',
            '\n',
            'feature_cols = [c for c in all_store_data.columns \n',
            '               if c not in exclude_cols + [\'売上数量\', \'店舗\']]\n',
            'numeric_cols = all_store_data[feature_cols].select_dtypes(include=[np.number]).columns.tolist()\n',
            '\n',
            'model_data_all = pd.concat([\n',
            '    all_store_data[numeric_cols + [\'売上数量\']],\n',
            '    store_dummies,\n',
            '    category_dummies\n',
            '], axis=1).dropna()\n',
            '\n',
            'print(f\'有効データ: {len(model_data_all)}行, {len(model_data_all.columns)-1}特徴量\')\n',
            '\n',
            '# PyCaret setup\n',
            's_all = setup(\n',
            '    model_data_all,\n',
            '    target=\'売上数量\',\n',
            '    session_id=123,\n',
            '    train_size=0.8,\n',
            '    fold=10,\n',
            '    normalize=True,\n',
            '    remove_multicollinearity=True,\n',
            '    multicollinearity_threshold=0.95,\n',
            '    silent=True,\n',
            '    verbose=False\n',
            ')\n',
            '\n',
            '# モデル比較\n',
            'print(\'\\n🔍 compare_models()実行中（全店舗統合）...\')\n',
            'best_models_all = compare_models(\n',
            '    n_select=5,\n',
            '    sort=\'R2\',\n',
            '    turbo=False,\n',
            '    verbose=False\n',
            ')\n',
            '\n',
            'comparison_all = pull()\n',
            'print(\'\\n📊 モデル比較結果（Top 5）:\')\n',
            'print(comparison_all[[\'Model\', \'R2\', \'MAE\', \'RMSE\']].head())\n',
            '\n',
            '# 過学習検出\n',
            'best_model_all = best_models_all[0] if isinstance(best_models_all, list) else best_models_all\n',
            '\n',
            'X_train_all = get_config(\'X_train\')\n',
            'y_train_all = get_config(\'y_train\')\n',
            'X_test_all = get_config(\'X_test\')\n',
            'y_test_all = get_config(\'y_test\')\n',
            '\n',
            'overfitting_all = detect_overfitting(\n',
            '    best_model_all, X_train_all, y_train_all, X_test_all, y_test_all,\n',
            '    model_name=f\'AllStores - {best_model_all.__class__.__name__}\'\n',
            ')\n',
            '\n',
            'print(f\'\\n🔬 過学習検出結果:\')\n',
            'print(f\'  Train R²: {overfitting_all[\"r2_train\"]:.4f}\')\n',
            'print(f\'  Test R²: {overfitting_all[\"r2_test\"]:.4f}\')\n',
            'print(f\'  R²ギャップ: {overfitting_all[\"r2_gap\"]:.4f}\')\n',
            'print(f\'  過学習判定: {\"はい\" if overfitting_all[\"is_overfitting\"] else \"いいえ\"}\')\n',
            '\n',
            '# 結果保存\n',
            'all_store_result = {\n',
            '    \'分析タイプ\': \'全店舗統合\',\n',
            '    \'店舗\': \'全店舗\',\n',
            '    \'データ数\': len(model_data_all),\n',
            '    \'ベストモデル\': best_model_all.__class__.__name__,\n',
            '    \'R2_Test\': overfitting_all[\'r2_test\'],\n',
            '    \'R2_Train\': overfitting_all[\'r2_train\'],\n',
            '    \'R2_Gap\': overfitting_all[\'r2_gap\'],\n',
            '    \'過学習\': overfitting_all[\'is_overfitting\'],\n',
            '    \'深刻度\': overfitting_all[\'overfitting_severity\'],\n',
            '    \'MAE_Test\': overfitting_all[\'mae_test\'],\n',
            '    \'RMSE_Test\': overfitting_all[\'rmse_test\']\n',
            '}\n',
            '\n',
            '# Learning Curve\n',
            'fig_all, gap_all = plot_learning_curve(best_model_all, X_train_all, y_train_all,\n',
            '                                       model_name=\'全店舗統合\', cv=10)\n',
            'fig_all.savefig(\'output/learning_curves/learning_curve_AllStores.png\',\n',
            '               dpi=150, bbox_inches=\'tight\')\n',
            'plt.close(fig_all)\n',
            '\n',
            'print(\'\\n✅ 全店舗統合モデル分析完了\')\n'
        ]
    },
    {
        'cell_type': 'code',
        'id': 'store_individual',
        'source': [
            '# ========================================\n',
            '# 9. 店舗別個別モデル分析\n',
            '# ========================================\n',
            '\n',
            'print(\'\\n\' + \'=\'*80)\n',
            'print(\'🏪 店舗別個別モデル分析\')\n',
            'print(\'=\'*80)\n',
            '\n',
            'store_results = []\n',
            '\n',
            '# 店舗リスト取得\n',
            'stores = data[\'店舗\'].unique()\n',
            'print(f\'\\n対象店舗数: {len(stores)}店舗\')\n',
            'print(f\'店舗リスト: {stores}\')\n',
            '\n',
            'for store in stores:\n',
            '    print(f\'\\n--- 店舗: {store} ---\')\n',
            '    \n',
            '    # 店舗データ抽出\n',
            '    store_data = data[data[\'店舗\'] == store].copy()\n',
            '    \n',
            '    if len(store_data) < 500:\n',
            '        print(f\'⚠️ データ不足 ({len(store_data)}行) - スキップ\')\n',
            '        continue\n',
            '    \n',
            '    print(f\'データ数: {len(store_data)}行\')\n',
            '    print(f\'カテゴリ数: {store_data[\"category_l\"].nunique()}\')\n',
            '    \n',
            '    # 不要列除外\n',
            '    exclude_cols = [\'店舗\', \'商品名\', \'日付\', \'売上金額\',\n',
            '                   \'フェイスくくり大分類\', \'フェイスくくり中分類\', \'フェイスくくり小分類\']\n',
            '    \n',
            '    # カテゴリをダミー変数化\n',
            '    if \'category_l\' in store_data.columns:\n',
            '        category_dummies = pd.get_dummies(store_data[\'category_l\'], prefix=\'cat\')\n',
            '    else:\n',
            '        category_dummies = pd.DataFrame()\n',
            '    \n',
            '    feature_cols = [c for c in store_data.columns \n',
            '                   if c not in exclude_cols + [\'売上数量\', \'category_l\']]\n',
            '    numeric_cols = store_data[feature_cols].select_dtypes(include=[np.number]).columns.tolist()\n',
            '    \n',
            '    model_data_store = pd.concat([\n',
            '        store_data[numeric_cols + [\'売上数量\']],\n',
            '        category_dummies\n',
            '    ], axis=1).dropna()\n',
            '    \n',
            '    if len(model_data_store) < 100:\n',
            '        print(f\'⚠️ 有効データ不足 ({len(model_data_store)}行) - スキップ\')\n',
            '        continue\n',
            '    \n',
            '    print(f\'有効データ: {len(model_data_store)}行, {len(model_data_store.columns)-1}特徴量\')\n',
            '    \n',
            '    # PyCaret setup\n',
            '    s_store = setup(\n',
            '        model_data_store,\n',
            '        target=\'売上数量\',\n',
            '        session_id=123,\n',
            '        train_size=0.8,\n',
            '        fold=5,\n',
            '        normalize=True,\n',
            '        remove_multicollinearity=True,\n',
            '        multicollinearity_threshold=0.95,\n',
            '        silent=True,\n',
            '        verbose=False\n',
            '    )\n',
            '    \n',
            '    # モデル比較\n',
            '    print(f\'\\n🔍 compare_models()実行中（店舗: {store}）...\')\n',
            '    best_models_store = compare_models(\n',
            '        n_select=5,\n',
            '        sort=\'R2\',\n',
            '        turbo=False,\n',
            '        verbose=False\n',
            '    )\n',
            '    \n',
            '    comparison_store = pull()\n',
            '    print(\'\\n📊 モデル比較結果（Top 5）:\')\n',
            '    print(comparison_store[[\'Model\', \'R2\', \'MAE\', \'RMSE\']].head())\n',
            '    \n',
            '    # 過学習検出\n',
            '    best_model_store = best_models_store[0] if isinstance(best_models_store, list) else best_models_store\n',
            '    \n',
            '    X_train_store = get_config(\'X_train\')\n',
            '    y_train_store = get_config(\'y_train\')\n',
            '    X_test_store = get_config(\'X_test\')\n',
            '    y_test_store = get_config(\'y_test\')\n',
            '    \n',
            '    overfitting_store = detect_overfitting(\n',
            '        best_model_store, X_train_store, y_train_store, X_test_store, y_test_store,\n',
            '        model_name=f\'{store} - {best_model_store.__class__.__name__}\'\n',
            '    )\n',
            '    \n',
            '    print(f\'\\n🔬 過学習検出結果:\')\n',
            '    print(f\'  Train R²: {overfitting_store[\"r2_train\"]:.4f}\')\n',
            '    print(f\'  Test R²: {overfitting_store[\"r2_test\"]:.4f}\')\n',
            '    print(f\'  R²ギャップ: {overfitting_store[\"r2_gap\"]:.4f}\')\n',
            '    print(f\'  過学習判定: {\"はい\" if overfitting_store[\"is_overfitting\"] else \"いいえ\"}\')\n',
            '    \n',
            '    # 結果保存\n',
            '    store_results.append({\n',
            '        \'分析タイプ\': \'店舗別\',\n',
            '        \'店舗\': store,\n',
            '        \'データ数\': len(model_data_store),\n',
            '        \'ベストモデル\': best_model_store.__class__.__name__,\n',
            '        \'R2_Test\': overfitting_store[\'r2_test\'],\n',
            '        \'R2_Train\': overfitting_store[\'r2_train\'],\n',
            '        \'R2_Gap\': overfitting_store[\'r2_gap\'],\n',
            '        \'過学習\': overfitting_store[\'is_overfitting\'],\n',
            '        \'深刻度\': overfitting_store[\'overfitting_severity\'],\n',
            '        \'MAE_Test\': overfitting_store[\'mae_test\'],\n',
            '        \'RMSE_Test\': overfitting_store[\'rmse_test\']\n',
            '    })\n',
            '    \n',
            '    # Learning Curve\n',
            '    fig_store, gap_store = plot_learning_curve(\n',
            '        best_model_store, X_train_store, y_train_store,\n',
            '        model_name=f\'店舗{store}\', cv=5\n',
            '    )\n',
            '    fig_store.savefig(f\'output/learning_curves/learning_curve_Store_{store}.png\',\n',
            '                     dpi=150, bbox_inches=\'tight\')\n',
            '    plt.close(fig_store)\n',
            '    \n',
            '    print(f\'✅ 店舗{store}分析完了\')\n',
            '\n',
            'print(f\'\\n✅ 店舗別分析完了: {len(store_results)}店舗\')\n'
        ]
    },
    {
        'cell_type': 'code',
        'id': 'store_comparison',
        'source': [
            '# ========================================\n',
            '# 10. 全店舗統合 vs 店舗別 比較分析\n',
            '# ========================================\n',
            '\n',
            'print(\'\\n\' + \'=\'*80)\n',
            'print(\'📊 全店舗統合 vs 店舗別モデル 比較分析\')\n',
            'print(\'=\'*80)\n',
            '\n',
            '# 全結果を統合\n',
            'store_comparison_results = [all_store_result] + store_results\n',
            'store_comparison_df = pd.DataFrame(store_comparison_results)\n',
            '\n',
            'if len(store_comparison_df) > 0:\n',
            '    print(\'\\n【全店舗統合 vs 店舗別 パフォーマンス比較】\')\n',
            '    print(store_comparison_df[[\'分析タイプ\', \'店舗\', \'ベストモデル\', \'R2_Test\',\n',
            '                              \'R2_Gap\', \'過学習\', \'深刻度\', \'データ数\']].to_string(index=False))\n',
            '    \n',
            '    # 統計サマリー\n',
            '    print(\'\\n\' + \'=\'*80)\n',
            '    print(\'📈 戦略別パフォーマンスサマリー\')\n',
            '    print(\'=\'*80)\n',
            '    \n',
            '    strategy_summary = store_comparison_df.groupby(\'分析タイプ\').agg({\n',
            '        \'R2_Test\': [\'mean\', \'std\', \'min\', \'max\'],\n',
            '        \'R2_Gap\': [\'mean\', \'max\'],\n',
            '        \'過学習\': lambda x: (x == True).sum(),\n',
            '        \'店舗\': \'count\'\n',
            '    }).round(4)\n',
            '    \n',
            '    print(strategy_summary)\n',
            '    \n',
            '    # 最適戦略の判定\n',
            '    all_store_r2 = store_comparison_df[store_comparison_df[\'分析タイプ\'] == \'全店舗統合\'][\'R2_Test\'].iloc[0]\n',
            '    per_store_avg_r2 = store_comparison_df[store_comparison_df[\'分析タイプ\'] == \'店舗別\'][\'R2_Test\'].mean()\n',
            '    \n',
            '    print(\'\\n\' + \'=\'*80)\n',
            '    print(\'🎯 最適モデリング戦略の判定\')\n',
            '    print(\'=\'*80)\n',
            '    \n',
            '    print(f\'\\n全店舗統合モデル R²: {all_store_r2:.4f}\')\n',
            '    print(f\'店舗別モデル平均 R²: {per_store_avg_r2:.4f}\')\n',
            '    print(f\'差分: {per_store_avg_r2 - all_store_r2:.4f} ({(per_store_avg_r2 - all_store_r2)/all_store_r2:.2%})\')\n',
            '    \n',
            '    # 判定基準\n',
            '    if per_store_avg_r2 > all_store_r2 + 0.05:  # 5%以上改善\n',
            '        recommendation = \'✅ 店舗別モデル推奨\'\n',
            '        reason = f\'店舗別モデルが{(per_store_avg_r2 - all_store_r2)/all_store_r2:.1%}改善\')\n',
            '    elif per_store_avg_r2 < all_store_r2 - 0.05:  # 5%以上悪化\n',
            '        recommendation = \'✅ 全店舗統合モデル推奨\'\n',
            '        reason = f\'統合モデルが{(all_store_r2 - per_store_avg_r2)/all_store_r2:.1%}優位\')\n',
            '    else:  # ±5%以内\n',
            '        recommendation = \'⚖️ ハイブリッド戦略推奨\'\n',
            '        reason = \'差分が小さいため、店舗特性に応じて使い分け\'\n',
            '    \n',
            '    print(f\'\\n{recommendation}\')\n',
            '    print(f\'理由: {reason}\')\n',
            '    \n',
            '    # 詳細推奨\n',
            '    print(\'\\n💡 実装推奨:\')\n',
            '    if \'店舗別\' in recommendation:\n',
            '        print(\'  1. 各店舗で個別モデルを学習・デプロイ\')\n',
            '        print(\'  2. 新規店舗は統合モデルで開始、データ蓄積後に個別化\')\n',
            '        print(\'  3. 定期的にモデル再学習（月次推奨）\')\n',
            '    elif \'統合\' in recommendation:\n',
            '        print(\'  1. 全店舗で1つのモデルを共有（メンテナンスコスト削減）\')\n',
            '        print(\'  2. 店舗ダミー変数で店舗特性を吸収\')\n',
            '        print(\'  3. 店舗固有の特徴量を追加検討（立地、商圏など）\')\n',
            '    else:  # ハイブリッド\n',
            '        print(\'  1. データ量が豊富な店舗 → 個別モデル\')\n',
            '        print(\'  2. データ不足の店舗 → 統合モデル\')\n',
            '        print(\'  3. 閾値: 1店舗あたり5000行以上なら個別化\')\n',
            '    \n',
            '    # 店舗別パフォーマンスランキング\n',
            '    print(\'\\n\' + \'=\'*80)\n',
            '    print(\'🏆 店舗別パフォーマンスランキング\')\n',
            '    print(\'=\'*80)\n',
            '    \n',
            '    store_only = store_comparison_df[store_comparison_df[\'分析タイプ\'] == \'店舗別\'].copy()\n',
            '    if len(store_only) > 0:\n',
            '        store_only_sorted = store_only.sort_values(\'R2_Test\', ascending=False)\n',
            '        print(store_only_sorted[[\'店舗\', \'ベストモデル\', \'R2_Test\', \'R2_Gap\',\n',
            '                                \'過学習\', \'データ数\']].to_string(index=False))\n',
            '        \n',
            '        # ベスト店舗とワースト店舗\n',
            '        best_store = store_only_sorted.iloc[0]\n',
            '        worst_store = store_only_sorted.iloc[-1]\n',
            '        \n',
            '        print(f\'\\n🥇 最高精度店舗: {best_store[\"店舗\"]} (R²={best_store[\"R2_Test\"]:.4f})\')\n',
            '        print(f\'   モデル: {best_store[\"ベストモデル\"]}\')\n',
            '        print(f\'   データ数: {best_store[\"データ数\"]:,}行\')\n',
            '        \n',
            '        print(f\'\\n⚠️ 改善必要店舗: {worst_store[\"店舗\"]} (R²={worst_store[\"R2_Test\"]:.4f})\')\n',
            '        print(f\'   モデル: {worst_store[\"ベストモデル\"]}\')\n',
            '        print(f\'   データ数: {worst_store[\"データ数\"]:,}行\')\n',
            '        print(f\'   改善策: データ期間延長、特徴量見直し、統合モデル利用検討\')\n',
            '    \n',
            '    # CSV保存\n',
            '    output_path = Path(\'output/store_comparison_results.csv\')\n',
            '    store_comparison_df.to_csv(output_path, index=False, encoding=\'utf-8-sig\')\n',
            '    print(f\'\\n✅ 結果をCSV保存: {output_path}\')\n',
            '\n',
            'else:\n',
            '    print(\'⚠️ 比較結果が得られませんでした\')\n',
            '\n',
            'print(\'\\n✅ 店舗別分析完了！\')\n'
        ]
    }
]

# ノートブック読み込み
notebook_path = Path('/mnt/d/github/pycaret/work/Step5_CategoryWise_Compare_with_Overfitting.ipynb')

with open(notebook_path, 'r', encoding='utf-8') as f:
    nb = json.load(f)

# 最後のセル（summary）の後に挿入
nb['cells'].extend(store_analysis_cells)

# 保存
with open(notebook_path, 'w', encoding='utf-8') as f:
    json.dump(nb, f, ensure_ascii=False, indent=1)

print(f"✅ 店舗別分析セルを追加しました（3セル追加）")
print(f"✅ 保存完了: {notebook_path}")
print("\n追加されたセル:")
print("  Cell 8: 全店舗統合モデル（店舗をダミー変数化）")
print("  Cell 9: 店舗別個別モデル")
print("  Cell 10: 全店舗統合 vs 店舗別 比較分析")
